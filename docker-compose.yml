version: '3.5'

services:


  # App Service
  app:
    # Configuration for building the docker image for the service
    build:
      context: . # Use an image built from the specified dockerfile in the current directory.
      dockerfile: docker/golang/Dockerfile
#    image: golang:1.14 # Uncomment for development
    depends_on:
      - redis
      - mongo
      - mysql
    environment: # Pass environment variables to the service
      PORT: 8000
      MONGO_URL: mongodb://mongoadmin:secret@mongo:27017
      MONGO_DB: platform
      MONGO_TIMEOUT: 10
      MYSQL_SERVERNAME: mysql:3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ""
      MYSQL_DBNAME: platform
      REDIS_URL: redis:6379
      URL_DB: mongo
    ports:
      - "8000:8000" # Forward the exposed port 8000 on the container to port 8000 on the host machine
    restart: unless-stopped
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
## Uncomment for development
#    volumes:
#      - ./src:/go/src
#    working_dir: /go/src
#    command: go run main.go

  # Redis Service
  redis:
    image: "redis:alpine" # Use a public Redis image to build the redis service
    restart: unless-stopped
    networks:
      - backend

  # Mongo Service
  mongo:
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoadmin
      MONGO_INITDB_ROOT_PASSWORD: secret
      MONGO_INITDB_DATABASE: platform
    image: mongo:4.2.3
    ports:
      - "27017:27017"
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  # MySQL Service
  mysql:
    command: ["--default-authentication-plugin=mysql_native_password"]
    environment:
      - MYSQL_ROOT_PASSWORD=
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    image: mysql:8
    networks:
      - backend
    restart: unless-stopped
    ports:
      - "3360:3306"

networks:
  backend: